!<arch>
0-isupper.c/    0           0     0     644     208       `
#include "main.h"
/**
 * _isupper - evalue if letter is uppercase .
 * @l: print int
 * Return: Always 0.
 */

int _isupper(int l)
{
	if (l >= 'A' && l <= 'Z')
	{
		return (1);
	}
	else
	{
		return (0);
	}
}
0-memset.c/     0           0     0     644     247       `
#include "main.h"
/**
 * _memset - fills memory with constant byte
 * @n: unsigned init
 * @s: pointer
 * @b: byte
 * Return: (s)
 */
char *_memset(char *s, char b, unsigned int n)
{
unsigned int i;
for (i = 0; i < n; i++)
s[i] = b;
return (s);
}

0-strcat.c/     0           0     0     644     340       `
#include "main.h"

/**
 * _strcat - concatenates two strings
 * @dest: given value
 * @src: also given value
 * Return: dest
 */

char *_strcat(char *dest, char *src)
{
	int a;
	int b;

	a = 0;
	while (dest[a] != '\0')
	{
		a++;
	}

	b = 0;
	while (src[b] != '\0')
	{
		dest[a] = src[b];
		b++;
		a++;
	}
	dest[a] = '\0';
	return (dest);
}
100-atoi.c/     0           0     0     644     593       `
#include "main.h"
/**
 * is_numerical - check if it is a digit
 * @n: Number
 * Return: If is a number, return 1 else return 0
 */
int is_numerical(unsigned int n)
{
	return (n >= '0' &&  n <= '9');
}
/**
 * _atoi - convert a string to an integer
 * @s: String
 * Return: Return the num
 */
int _atoi(char *s)
{
	unsigned int number, i;
	int sign;

	sign = 1;
	number = 0;
	for (i = 0; s[i] != '\0'; i++)
	{
		if (is_numerical(s[i]))
		{
			number = (s[i] - 48) + number * 10;
			if (s[i + 1] == ' ')
				break;
		}
		else if (s[i] == '-')
		{
			sign *= -1;
		}
	}
	return (number * sign);
}

1-isdigit.c/    0           0     0     644     188       `
#include "main.h"
/**
 * _isdigit - if is a digit
 * @d: print int
 * Return: Always 0.
 */

int _isdigit(int d)
{
	if (d >= 48 && d <= 57)
	{
		return (1);
	}
	else
	{
		return (0);
	}
}
1-memcpy.c/     0           0     0     644     420       `
#include "main.h"
/**
 * _memcpy -   copy number bytes form adress "from" to adress "to"
 * @dest: content is to be copied
 * @src: Source of data to be copied
 * @n: bytes of the memory
 * Return: dest
 */

char *_memcpy(char *dest, char *src, unsigned int n)
{
unsigned int i;

i = 0;
while (i < n)  /*Delacring WHILE*/
{
*(dest + i) = *(src + i); /*add 1 position dest and src*/
i++;
} /*END WHILE*/
return (dest);
}
1-strncat.c/    0           0     0     644     445       `
#include "main.h"

/**
 * _strncat - A function that concatenates two strings
 * @dest: A pointer to a character that will be changed
 * @src: A pointer to a character that will be changed
 * @n: value
 * Return: dest
 */
char *_strncat(char *dest, char *src, int n)
{
	int i, j;

	i = 0;
	while (dest[i] != '\0')
	{
		i++;
	}

	j = 0;
	while (j < n && src[j] != '\0')
	{
		dest[i] = src[j];
		j++;
		i++;
	}
	dest[i] = '\0';

	return (dest);
}

2-strchr.c/     0           0     0     644     384       `
#include "main.h"

/**
 * _strchr - Locates a character in a string
 * @s: String
 * @c: Character to search
 * Return: Pointer to first occurrence of the character c in the string
 **/

char *_strchr(char *s, char c)
{
while (*s != '\0') /*Declaring WHILE*/
{
if (*s == c) /*if s ==  c*/
{
return (s); /*return s*/
}
++s;
}
if (*s == c)
{
return (s);
}
return (0);/* values null*/
}
2-strlen.c/     0           0     0     644     256       `
#include "main.h"

/**
 * _strlen -length of a string
 * @s: A pointer to an int that will be changed/updated
 * Return: void that means our answer is correct
 *
 */
int _strlen(char *s)
{
	int a;

	a = 0;
	while (s[a] != '\0')
	{
		a++;
	}
	return (a);
}
2-strncpy.c/    0           0     0     644     330       `
#include "main.h"
/**
 * _strncpy - copy a string
 * @dest: input value
 * @src: input value
 * @n: input value
 *
 * Return: dest
 */
char *_strncpy(char *dest, char *src, int n)
{
	int j;

	j = 0;
	while (j < n && src[j] != '\0')
	{
		dest[j] = src[j];
		j++;
	}
	while (j < n)
	{
		dest[j] = '\0';
		j++;
	}

	return (dest);
}
3-islower.c/    0           0     0     644     265       `
#include "main.h"

/**
 * _islower - checking for lowercase character
 * @c: is allocated as the character to be checked
 * Return: 1 if the character is lowercase, 0 if not.
 */

int _islower(int c)
{
	if (c >= 'a' && c <= 'z')
		return (1);
	else
		return (0);
}

3-puts.c/       0           0     0     644     275       `
#include "main.h"

/**
 * _puts - prints a string
 * @str: A pointer to an int that will be changed
 * Return: void which means our answer is correct
 */
void _puts(char *str)
{
	char *c;
	int m;

	c = str;
	for (m = 0; c[m]; m++)
	{
		_putchar (c[m]);
	}
	_putchar('\n');
}

3-strcmp.c/     0           0     0     644     427       `
#include "main.h"
/**
 * _strcmp - compares two lines of strings
 * @s1: A pointer to a character that will be changed
 * @s2: A pointer to a character that will also be changed/modified/updated
 * Return: dest
 */
int _strcmp(char *s1, char *s2)
{
	char *str_one = s1;
	char *str_two = s2;

	while (*str_one != '\0' && *str_two != '\0' && *str_one == *str_two)
	{
		str_one++;
		str_two++;
	}
	return (*str_one - *str_two);
}

3-strspn.c/     0           0     0     644     684       `
#include "main.h"

/**
 * _strspn - Locates a character in a string
 * @s: This is the main C string to be scanned.
 * @accept: This is string containing the list of characters to match in s
 * Return: return count
 **/

unsigned int _strspn(char *s, char *accept)
{
int i, j;
int count = 0;
char *str1, *str2;

str1 = s;
str2 = accept;

i = 0;
while (str1[i] != '\0') /*Declaring WHILE *s */
{
j = 0;
while (str2[j] != '\0') /*Declaring WHILE *accept*/
{
if (str2[j] == str1[i]) /*Evaluate condition*/
{
count++; /*count number*/
break;
}
j++;    /*add j+1*/
}
if (s[i] != accept[j]) /*If aren't equals*/
{
break;
}
i++; /*add x+1*/
}
return (count); /*return the value of count*/
}
4-isalpha.c/    0           0     0     644     263       `
#include "main.h"

/**
 * _isalpha - runs a check to see if the character is is an alphabet character.
 * @c: is the character
 * Return: 1 is c is alphabet letter, 0 if not.
 */

int _isalpha(int c)
{
return ((c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z'));
}

4-strpbrk.c/    0           0     0     644     493       `
#include "main.h"

/**
 * _strpbrk - matches any character specified
 * @s: This is the C string to be scanned.
 * @accept:character in str1 that matches one of the characters in str2
 * Return: string s that matches any character specified in accept
 **/
char *_strpbrk(char *s, char *accept)
{
int j;

while (*s != '\0') /*Declaring WHILE*/
{
j = 0;
while (accept[j] != '\0')  /*Evaluating *accept*/
{
if (*s == accept[j])
{
return (s);
}
j++; /*add j+1*/
}
s++; /*add s+1*/
}
return (0);
}

5-strstr.c/     0           0     0     644     535       `
#include "main.h"

/**
 * _strstr - first occurrence of the substring needle in the string haystack
 * @haystack: main str to be examined
 * @needle: searched in haystack
 * Return: return 0
 **/

char  *_strstr(char *haystack, char *needle)
{
char *str1, *str2; /*Declaring variables*/

while (*haystack != '\0')
{
str1 = haystack; /*values*/
str2 = needle;

/*Star WHILE*/
while (*haystack != '\0' && *str2 != '\0' && *haystack == *str2)
{
haystack++;
str2++;
}
if (*str2 == '\0')
return (str1);
haystack = str1 + 1;
}
return (0);
}

6-abs.c/        0           0     0     644     212       `
#include "main.h"

/**
 * _abs - calculate the absolute value of an int
 * @n: is the integer to be assessed
 * Return: calculated absolute value
 */

int _abs(int n)
{
	if (n >= 0)
		return (n);
	return (-n);
}
9-strcpy.c/     0           0     0     644     341       `
#include "main.h"
/**
 * _strcpy - copies the string pointed to by src
 * @dest: A pointer to a char that will be changed
 * @src: A pointer to a char that will be changed
 * Return: dest
 */
char *_strcpy(char *dest, char *src)
{
	int i;

	i = 0;
	while (src[i] != '\0')
	{
		dest[i] = src[i];
		i++;
	}
	dest[i] = '\0';

	return (dest);
}

_putchar.c/     0           0     0     644     243       `
#include <unistd.h>
/**
 * _putchar - writes the character c to stdout
 * @c: The character to print
 * Return: On success 1.
 * On error, -1 is returned, and errno is set appropriately.
 */
int _putchar(char c)
{
	return (write(1, &c, 1));
}

